class WumpusWorld:
  def __init__(self, blocks, cave, badge, animal, hunter, initial_location):
    self.initial_location = initial_location    # copy the input
    self.animal = animal
    self.cave = cave
    self.hunter = hunter
    self.badge = badge
    self.blocks = blocks
    self.player = self.initial_location

    self.breeze = {}    # stores locations of breezy squares
    self.stench = {}    # stores location of smelly squares
    
    for c in self.cave: 
      for l in self.neighbours(c):
        self.footprint[l] = True
    for n in self.hunter: 
      for l in self.neighbours(n):
        self.nen[l] = True
    for a in self.animal:
      for l in self.neighbours(n):
        self.growl[l] = True
      
      
  def neighbours(self, loc):    # returns neighbours of tuple loc = (x,y) 
    return [(loc[0]+1,loc[1]), (loc[0]-1,loc[1]), (loc[0],loc[1]+1), (loc[0],loc[1]-1)]

  
  def print(self):            # print the board state (useful for debugging)
    print(self.player)
    xmin = min([x for x,y in self.blocks])
    xmax = max([x for x,y in self.blocks])
    ymin = min([y for x,y in self.blocks])
    ymax = max([y for x,y in self.blocks])
    for y in range(ymin, ymax+1):
      for x in range(xmin, xmax+1): 
        
        if (x,ymax-y) in self.blocks:
          print('B',end='')
        elif (x,ymax-y) in self.wumpus:
          print('W',end='')
        elif (x,ymax-y) in self.pits:
          print('P',end='')
        elif (x,ymax-y) in self.gold:
          print('G',end='')
        elif self.player == (x, ymax - y):
          print('Y',end='')
        else:
          print(' ',end='')
      print("")
    a = self.player in self.growl 
    n = self.player in self.nen
    c = self.player in self.footprint
    
    print("Hearing Growls: " + str(a))
    print("Sensing Nen: " + str(n))
    print("Seeing Footprints: " + str(c))

    

  def sim(self, agent):
   

      self.print()

      a = self.player in self.growl 
      n = self.player in self.nen
      c = self.player in self.footprint
      agent.give_senses(self.player, a, n, c)  # give the agent its senses
      action = agent.get_action()       # get the agents action
      print(action, end='\n\n')

      new_location = self.player
      if action == 'MOVE_UP':             # update the location for moving up/down/left/right
        new_location = (self.player[0], self.player[1]+1)
      elif action == 'MOVE_DOWN':
        new_location = (self.player[0], self.player[1]-1)
      elif action == 'MOVE_LEFT':
        new_location = (self.player[0]-1,self.player[1])
      elif action == 'MOVE_RIGHT':
        new_location = (self.player[0]+1,self.player[1])
      elif action == 'QUIT':
        return 'QUIT'

      if new_location in self.animal:   # check if fell into a pit
        return 'EATEN'
      if new_location in self.nen: # check if eaten by wumpus
        return 'DEFEATED'
      if new_location in self.cave:
        return 'ATTACKED'
      if new_location in self.badge:   # check if found gold
        return 'FOUND THE BADGE'

      if new_location not in self.blocks: # if agent ran into a wall, then reset position
        self.player = new_location
